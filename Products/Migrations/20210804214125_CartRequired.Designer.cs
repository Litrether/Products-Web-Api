// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Products.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210804214125_CartRequired")]
    partial class CartRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Grocery"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Meat"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dairy Products"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Confectionery"
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Name", "Description", "Cost", "CategoryId", "ProviderId")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL AND [Description] IS NOT NULL");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Cost = 1.53,
                            Description = "Contains useful trace elements",
                            Name = "Yoghurt",
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Cost = 2.25,
                            Description = "From the freshest milk",
                            Name = "Butter",
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            Cost = 1.1699999999999999,
                            Description = "From the healthiest cows",
                            Name = "Milk",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 6,
                            Cost = 4.5,
                            Description = "Baked with love",
                            Name = "Cake",
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Cost = 3.8500000000000001,
                            Description = "Fresh",
                            Name = "Sausage",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Cost = 2.5499999999999998,
                            Description = "The most delicious meat",
                            Name = "Meatballs",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Cost = 1.1299999999999999,
                            Description = "Only from the garden",
                            Name = "Cabbage",
                            ProviderId = 6
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Cost = 1.0700000000000001,
                            Description = "Purple as a bruise",
                            Name = "Beetroot",
                            ProviderId = 6
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Cost = 1.78,
                            Description = "At a discount",
                            Name = "Asparagus",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Cost = 1.1000000000000001,
                            Description = "Minions love them",
                            Name = "Banana",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Cost = 1.99,
                            Description = "Hairy",
                            Name = "Kivifruit",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Cost = 2.4199999999999999,
                            Description = "Sugar taste",
                            Name = "Melon",
                            ProviderId = 7
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Cost = 1.72,
                            Description = "Like an orange sunset",
                            Name = "Orange",
                            ProviderId = 7
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Cost = 3.1000000000000001,
                            Description = "Avocado colors",
                            Name = "Avocado",
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Cost = 5.4900000000000002,
                            Description = "He can speak",
                            Name = "Lamb",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Cost = 4.0,
                            Description = "He was friends with a lamb",
                            Name = "Veal",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Cost = 3.3500000000000001,
                            Description = "Of today's production",
                            Name = "Chop",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            Cost = 3.1000000000000001,
                            Description = "Out of the oven",
                            Name = "Chicken",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            Cost = 0.80000000000000004,
                            Description = "For tea",
                            Name = "Biscuit",
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Cost = 1.2,
                            Description = "From Belarusian fields",
                            Name = "Potato",
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            Cost = 3.1200000000000001,
                            Description = "For cakes",
                            Name = "Cream",
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            Cost = 4.3200000000000003,
                            Description = "Ratatouille near",
                            Name = "Cheese",
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            Cost = 2.1000000000000001,
                            Description = "Sour but expensive",
                            Name = "Cranberry",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            Cost = 0.75,
                            Description = "Good for vision",
                            Name = "Carrot",
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 6,
                            Cost = 1.05,
                            Description = "In the shape of a fish",
                            Name = "Cookies",
                            ProviderId = 7
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 2,
                            Cost = 2.6299999999999999,
                            Description = "Like a bruise",
                            Name = "Plum",
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 4,
                            Cost = 5.0999999999999996,
                            Description = "Donald",
                            Name = "Duck",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            Cost = 2.6000000000000001,
                            Description = "On Halloween",
                            Name = "Pumpkin",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 2,
                            Cost = 1.5900000000000001,
                            Description = "Which fell on newton",
                            Name = "Apple",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 6,
                            Cost = 0.45000000000000001,
                            Description = "From Belarus",
                            Name = "Bread",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 2,
                            Cost = 1.49,
                            Description = "From my garden",
                            Name = "Raspberry",
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 2,
                            Cost = 0.98999999999999999,
                            Description = "Sour like cranberries",
                            Name = "Lemon",
                            ProviderId = 6
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 3,
                            Cost = 1.2,
                            Description = "Student food",
                            Name = "Cereals",
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 6,
                            Cost = 0.80000000000000004,
                            Description = "For coffee",
                            Name = "Wafer",
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 2,
                            Cost = 1.8899999999999999,
                            Description = "With a leaf",
                            Name = "Apricot",
                            ProviderId = 6
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 4,
                            Cost = 7.0999999999999996,
                            Description = "Not for vegans",
                            Name = "Beef",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 3,
                            Cost = 5.6900000000000004,
                            Description = "Delicious with stew",
                            Name = "Buckwheat",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 3,
                            Cost = 1.1799999999999999,
                            Description = "Chinese delicacy",
                            Name = "Rice",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 3,
                            Cost = 0.94999999999999996,
                            Description = "Ser",
                            Name = "Oatmeal",
                            ProviderId = 8
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 6,
                            Cost = 4.9500000000000002,
                            Description = "In the form of a heart",
                            Name = "Pie",
                            ProviderId = 6
                        });
                });

            modelBuilder.Entity("Entities.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Underdog"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Atha Makina"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shirin Agro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Milk Gorki"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Archeda"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pascual"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Javimar"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MiLida"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f594829a-4045-4011-8ed6-1bc100fd80f9",
                            ConcurrencyStamp = "d5990d9b-fb1e-4dea-b828-fc699d4abd44",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "020dc7a2-2317-4de9-a82b-3248609d4deb",
                            ConcurrencyStamp = "c46294bc-c83d-4708-a5e1-7c6907ffc625",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "1c41bf1e-1e69-4142-8b34-c41d41f7e119",
                            ConcurrencyStamp = "ca27c52e-d060-43de-96a5-882589f12f13",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Cart", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Entities.Models.Provider", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
